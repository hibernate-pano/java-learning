/**
 * 装饰器模式
 *
 * @author pano
 * @date 2024/1/2
 **/
package com.example.design.patterns.DecoratorPattern;

/*
装饰者模式（Decorator Pattern）是一种结构型设计模式，它允许在运行时动态地给对象添加新的功能或责任，同时又不影响从同一个类派生出来的其他对象。
这种模式是在不改变原有对象的基础上扩展其行为的一种方式。

装饰者模式的主要组成部分包括：

- 抽象组件（Component）：定义一个接口，以规范需要被装饰的原始对象和装饰者的公共操作。
- 具体组件（Concrete Component）：实现了抽象组件的实体类，是待装饰的对象。
- 装饰者（Decorator）：装饰者类继承了抽象组件，并且持有对抽象组件实例的引用。装饰者可以访问并修改组件的方法，同时也可以在其基础上增加额外的功能。
- 具体装饰者（Concrete Decorators）：这是具体的装饰者类，它们实现了装饰者接口，并负责在调用原始组件方法的同时提供额外的行为。


此处距离为咖啡店点咖啡的流程，是装饰器模式+工厂模式的结合使用。
 */
